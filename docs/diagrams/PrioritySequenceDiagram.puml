@startuml PrioritySequenceDiagram

!pragma teoz true

actor User
participant ":UI" as UI
participant ":LogicManager" as LogicManager
participant ":AddressBookParser" as AddressBookParser
participant ":PriorityCommandParser" as PriorityCommandParser
participant "priority:PriorityCommand" as PriorityCommand
participant ":Model" as Model
participant "personToEdit:Person" as PersonToEdit
participant "editedPerson:Person" as EditedPerson

User -> UI : priority 1 pr/HIGH
activate UI

UI -> LogicManager : execute("priority 1 pr/HIGH")
activate LogicManager

LogicManager -> AddressBookParser : parseCommand("priority 1 pr/HIGH")
activate AddressBookParser

AddressBookParser -> PriorityCommandParser : parse("1 pr/HIGH")
activate PriorityCommandParser

PriorityCommandParser -> PriorityCommandParser : parse arguments

create PriorityCommand
PriorityCommandParser -> PriorityCommand : new PriorityCommand(index, priority)
activate PriorityCommand
PriorityCommand --> PriorityCommandParser
deactivate PriorityCommand

PriorityCommandParser --> AddressBookParser : priority
deactivate PriorityCommandParser

AddressBookParser --> LogicManager : priority
deactivate AddressBookParser

LogicManager -> PriorityCommand : execute(model)
activate PriorityCommand

PriorityCommand -> Model : getFilteredPersonList()
activate Model
Model --> PriorityCommand : personList
deactivate Model

PriorityCommand -> PriorityCommand : get person at index

ref over PriorityCommand, PersonToEdit, EditedPerson : Create Edited Person

create PersonToEdit
PriorityCommand -> PersonToEdit : get personToEdit from list
activate PersonToEdit

PriorityCommand -> PriorityCommand : createEditedPerson(personToEdit)

create EditedPerson
PriorityCommand -> EditedPerson : new Person(name, phone, email,\naddress, tags, priority, remark)
activate EditedPerson
EditedPerson --> PriorityCommand
deactivate EditedPerson

PersonToEdit --> PriorityCommand
deactivate PersonToEdit

PriorityCommand -> Model : setPerson(personToEdit, editedPerson)
activate Model
Model --> PriorityCommand
deactivate Model

PriorityCommand -> Model : updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS)
activate Model
Model --> PriorityCommand
deactivate Model

create ":CommandResult" as CommandResult
PriorityCommand -> CommandResult : new CommandResult(MESSAGE_SUCCESS)
activate CommandResult
CommandResult --> PriorityCommand : result
deactivate CommandResult

PriorityCommand --> LogicManager : result
deactivate PriorityCommand

LogicManager --> UI : result
deactivate LogicManager

UI --> User : Display success message
deactivate UI

@enduml
